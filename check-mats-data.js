const { PrismaClient } = require('./src/generated/prisma/index.js');

async function checkMatsData() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç Sprawdzanie danych dywanik√≥w w bazie danych...\n');
    
    // Sprawd≈∫ liczbƒô rekord√≥w
    const count = await prisma.mats.count();
    console.log(`üìä Liczba rekord√≥w w tabeli Mats: ${count}`);
    
    if (count === 0) {
      console.log('\n‚ùå Brak danych dywanik√≥w w bazie danych!');
      console.log('üí° Uruchom: npx prisma db seed');
      return;
    }
    
    // Pobierz pierwsze 5 rekord√≥w
    const mats = await prisma.mats.findMany({
      take: 5
    });
    
    console.log('\nüìã Przyk≈Çadowe rekordy:');
    mats.forEach((mat, index) => {
      console.log(`${index + 1}. ID: ${mat.id}`);
      console.log(`   Kolor: ${mat.color}`);
      console.log(`   Typ: ${mat.type}`);
      console.log(`   Kom√≥rki: ${mat.cellType}`);
      console.log(`   Obszycie: ${mat.edgeColor}`);
      console.log(`   Obraz: ${mat.image}`);
      console.log('');
    });
    
    // Sprawd≈∫ unikalne kolory
    const colors = await prisma.mats.findMany({
      select: { color: true },
      distinct: ['color']
    });
    
    console.log('üé® Dostƒôpne kolory:');
    colors.forEach(color => {
      console.log(`   - ${color.color}`);
    });
    
    // Sprawd≈∫ unikalne typy
    const types = await prisma.mats.findMany({
      select: { type: true },
      distinct: ['type']
    });
    
    console.log('\nüîß Dostƒôpne typy:');
    types.forEach(type => {
      console.log(`   - ${type.type}`);
    });
    
    // Sprawd≈∫ unikalne typy kom√≥rek
    const cellTypes = await prisma.mats.findMany({
      select: { cellType: true },
      distinct: ['cellType']
    });
    
    console.log('\nüìê Dostƒôpne typy kom√≥rek:');
    cellTypes.forEach(cellType => {
      console.log(`   - ${cellType.cellType}`);
    });
    
    console.log('\n‚úÖ Sprawdzanie zako≈Ñczone!');
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas sprawdzania danych:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkMatsData(); 